1、指针版
const int N = 1000005;
char s[N]; 
struct node {
	 int count;
	 node *fail;
	 node *Next[26];
	 node() {
	 	 count = 0;
		 fail = NULL;
		 memset(Next, NULL, sizeof(Next));
	 }
};

void Insert(char *s, node* root) {
	   int i = 0; node *p = root;
	   while (s[i]) {
		    int ch = s[i] - 'a';
		    if (p->Next[ch] == NULL)
			  p->Next[ch] = new node();
		    p = p->Next[ch];
		    i++;
	   }
	 p->count++;
}

void build_ac_automation(node *root) {
	  queue<node*>q;
	  root->fail = NULL;
	  q.push(root);
	  while (!q.empty()) {
		      node *tmp = q.front();
		      q.pop();
		      node *p = NULL;
		      for (int i = 0; i < 26; i++) {
			    if (tmp->Next[i] != NULL) {
				      if (tmp == root)
					        tmp->Next[i]->fail = root;
				      else {
					        p = tmp->fail;
					    while (p != NULL) {
						        if (p->Next[i] != NULL) {
						      	    tmp->Next[i]->fail = p->Next[i];
							          break;
						        }
						  p = p->fail;
					}
					if (p == NULL)
						tmp->Next[i]->fail = root;
				}
				q.push(tmp->Next[i]);
			}
		}
	}
}

int query(node *root) {
	  int i = 0, cnt = 0;
	  node* p = root;
	  while (s[i]) {
		      int ch = s[i] - 'a';
		      while (p->Next[ch] == NULL && p != root)
			          p = p->fail;
		      p = p->Next[ch];
		      p = (p == NULL) ? root : p;
		      node *tmp = p;
		      while (tmp != root && tmp->count != -1) {
			          cnt += tmp->count;
			          tmp->count = -1;
			          tmp = tmp->fail;
		      }
		      i++;
	   }
	return cnt++;
}


静态ac机：
class tree {
public:
	int nx[510010][26], fail[510010];
	int end[510010];
	int root, tot;

	int newNode() {
		for (int i = 0; i < 26; i++)
			nx[tot][i] = -1;
		end[tot] = 0;
		return tot++;
	}

	void init() {
		tot = 0;
		root = newNode();
	}

	void insert(char s[]) {
		int len = strlen(s);
		int now = root;
		for (int i = 0; i < len; i++) {
			int id = s[i] - 'a';
			if (nx[now][id] == -1)
				nx[now][id] = newNode();
			now = nx[now][id];
		}
		end[now]++;
	}

	void build() {
		queue<int>q;
		fail[root] = root;
		for (int i = 0; i < 26; i++) {
			if (nx[root][i] == -1) {
				nx[root][i] = root;
			}
			else {
				fail[nx[root][i]] = root;
				q.push(nx[root][i]);
			}
		}
		while (!q.empty()) {
			int now = q.front();
			q.pop();
			for (int i = 0; i < 26; i++) {
				if (nx[now][i] == -1) {
					nx[now][i] = nx[fail[now]][i];
				}
				else {
					fail[nx[now][i]] = nx[fail[now]][i];
					q.push(nx[now][i]);
				}
			}
		}
	}

	int query(char s[]) {
		int res = 0;
		int len = strlen(s);
		int now = root;
		for (int i = 0; i < len; i++) {
			now = nx[now][s[i] - 'a'];
			int tmp = now;
			while (tmp != root&&end[tmp]!=0) {
				res += end[tmp];
				end[tmp] = 0;
				tmp = fail[tmp];
			}
		}
		return res;
	}

}ac;
