// 查找第一个相等的元素
int findFirstEqual(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (array[mid] >= key)
            right = mid - 1;
        else 
            left = mid + 1;
    }
    if (left < array.length && array[left] == key)
        return left;
    return -1;
}

// 查找最后一个相等的元素
int findLastEqual(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (array[mid] <= key)
            left = mid + 1;
        else
            right = mid - 1;
    }
    if (right >= 0 && array[right] == key)
        return right;
    return -1;
}

// 查找最后一个等于或者小于key的元素
int findLastEqualSmaller(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (array[mid] > key)
            right = mid - 1;
        else 
            left = mid + 1;
    }
    return right;
}

// 查找最后一个小于key的元素
int findLastSmaller(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (array[mid] >= key)
            right = mid - 1;
        else
            left = mid + 1;
    }
    return right;
}

// 查找第一个等于或者大于key的元素
int findFirstEqualLarger(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (array[mid] >= key)
            right = mid - 1;
        else 
            left = mid + 1;
    }
    return left;
}

// 查找第一个大于key的元素
int findFirstLarger(int[] array, int key) {
    int left = 0;
    int right = array.length - 1;
    while (left <= right) {
        int mid = (left + right) / 2;
        if (array[mid] > key)
            right = mid - 1;
        else
            left = mid + 1;
    }
    return left;
}

//O(1)快速乘
inline LL quick_mul(LL x,LL y,LL MOD){
    x=x%MOD,y=y%MOD;
    return ((x*y-(LL)(((long double)x*y+0.5)/MOD)*MOD)%MOD+MOD)%MOD;
}
//O(log)快速乘
inline LL quick_mul(LL a,LL n,LL m)
{
    LL ans=0;
    while(n)
    {
        if(n&1) ans=(ans+a)%m;
        a=(a<<1)%m;
        n>>=1;
    }
    return ans;
}
